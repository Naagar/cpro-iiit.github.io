<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>M23 Computer Programming</title>
    <link>https://example.com/docs/course_material/codes/</link>
    <description>Recent content on M23 Computer Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://example.com/docs/course_material/codes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linked List</title>
      <link>https://example.com/docs/course_material/codes/linkedList/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/course_material/codes/linkedList/</guid>
      <description> Linked list # Theory # Linked list can be defined as either a node structure doing nothing or one that is pointing to another linked list
See linked: Recursion
Warning: Make sure to always free up memory! Code # typedef struct node { struct node* nxt; // will point to the next node in the linked list if any int val; // store whatever else you might need } Node; int main() { // Code here } </description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://example.com/docs/course_material/codes/recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/course_material/codes/recursion/</guid>
      <description>Recursion # Hello there!
Are you looking for: Recursion?</description>
    </item>
    
  </channel>
</rss>
