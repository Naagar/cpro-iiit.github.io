<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on CPro Mon 23</title>
    <link>https://cpro-iiit.github.io/</link>
    <description>Recent content in Introduction on CPro Mon 23</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cpro-iiit.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing GCC</title>
      <link>https://cpro-iiit.github.io/posts/installingGCC/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/posts/installingGCC/</guid>
      <description>Installing gcc#This tutorial will be a quick walkthrough on installing gcc on different OS. We recommend you try installing gcc on your own before the start of classes. If, for some reason, you are unable to install gcc, then we will help you in the first tutorial session. We also recommend you install some text editor (VS Code for example).
We recommend the usage of Linux as this would be advantageous for your future courses as well.</description>
    </item>
    
    <item>
      <title>Linux Tools Course</title>
      <link>https://cpro-iiit.github.io/posts/linux_tools_course/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/posts/linux_tools_course/</guid>
      <description>To get familiar with Linux tools that are generally helpful for computer science, please go through the material here: https://missing.csail.mit.edu/</description>
    </item>
    
    <item>
      <title>Video Lectures from Elsewhere</title>
      <link>https://cpro-iiit.github.io/posts/video_lectures/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/posts/video_lectures/</guid>
      <description>You can find some video lectures on c programming from other universities bellow:
Uni. of Nebraska, Lincon Harvard
https://cs50.harvard.edu/x/2023/
https://www.youtube.com/watch?v=8mAITcNt710 </description>
    </item>
    
    <item>
      <title>Assignment - 1</title>
      <link>https://cpro-iiit.github.io/docs/course_material/assignments/assignment1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/assignments/assignment1/</guid>
      <description>Assignment 1#Question 1#Problem Description#Given an integer n as input, print its binary representation starting with the most significant bit, i.e. don&amp;rsquo;t print the 0&amp;rsquo;s before the first 1.
Link to problem on OJ
Input constraints#\(0 \le n \le 2^{30}\)Input format#The only line of input contains a single integer n
Output Format#Output a continous stream of bits of n starting from the most significant bit.</description>
    </item>
    
    <item>
      <title>Assignment - 2</title>
      <link>https://cpro-iiit.github.io/docs/course_material/assignments/assignment2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/assignments/assignment2/</guid>
      <description>Assignment 2#Question 1 - &amp;ldquo;Doubling Investments&amp;rdquo;#Problem Description#Mitansh is worldâ€™s best investor. Whatever the amount he has today, it doubles on the next day.
Initially he starts, with amount zero. Each day in the morning, he can choose to invest \(\$x\)more in addition to his previous amount \(\$y\). And on next day, his total amount becomes \(\$2(x&amp;#43;y)\).
However, he wants to get exactly \(\$z\)on some day.</description>
    </item>
    
    <item>
      <title>Grading Scheme</title>
      <link>https://cpro-iiit.github.io/grading_scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/grading_scheme/</guid>
      <description>Grading Scheme#Assignments: 30% Quizzes: 20% (2 Quizzes worth 10% each) Mid-Semester Exam: 15% End-Semester Exam: 25% Labs: 10% Bonus*: 5% Note: Total score for a student would be capped at 100% (if the student&amp;rsquo;s score happens to exceed 100)</description>
    </item>
    
    <item>
      <title>Honor Code</title>
      <link>https://cpro-iiit.github.io/honor_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/honor_code/</guid>
      <description>Honor Code#Any form of plagiarism in the Assignments or in the Lab Exams would be heavily penalised and would lead to a 0 score for both students, the student who copied and the one whose code was copied. It is solely your duty to ensure the safety of your code throughout the course .Thus, we will not be entertaining any requests after a student is found guilty of plagiarism.</description>
    </item>
    
    <item>
      <title>II.1 Typedef, Struct Initialization, Passing Pointers</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/4_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/4_10/</guid>
      <description>II.1 Typedef, Struct Initialization#Struct without Typedef##include&amp;lt;stdio.h&amp;gt; struct rectangle { float length; float breadth; }; float compute_area(struct rectangle r) { return r.length * r.breadth; } void print_rectangle(struct rectangle r) { printf(&amp;#34;Rectangle with length %f and breadth %f\n&amp;#34;, r.length, r.breadth); } int main() { struct rectangle rect = { 1.5, 3.2 }; // Initializer print_rectangle(rect); printf(&amp;#34;Area of the rectangle is %f \n&amp;#34;, compute_area(rect) ); } Struct with Typedef##include&amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>II.2 Strings and Enums</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/6_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/6_10/</guid>
      <description>II.2 Strings and Enums#Strings in C#as a pointer to char char *p = &amp;#34;abcde&amp;#34;; as an array of char char s[] = &amp;#34;abcde&amp;#34;; print(&amp;#34;%d %d&amp;#34;, sizeof(p), sizeof(s)); String Function Implementation##include &amp;#34;stdio.h&amp;#34; int strlenB(char* s) { int i = 0; while (s[i] != &amp;#39;\0&amp;#39;) { i++; } return i; } char* strcpyB(char *s, char *d) { int len_s = strlenB(s); for(int i = 0; i &amp;lt;= len_s;i++) { d[i] = s[i]; } return d; } char* str_rev(char *s, char *d) { int len_s = strlenB(s); for(int i = 0; i&amp;lt; len_s; i++) { d[i] = s[len_s - 1 - i]; } d[len_s] = &amp;#39;\0&amp;#39;; return d; } int main() { char *p = &amp;#34;xyz\0dsalkfjds&amp;#34;; char s[] = &amp;#34;abcde\0kjdakfjsh&amp;#34;; // abcde\0 // printf(&amp;#34;%d %d\n&amp;#34;,sizeof(p),sizeof(s)); // printf(&amp;#34;%s %s\n&amp;#34;,p, s); // printf(&amp;#34;%d %d\n&amp;#34;, strlen(p), strlen(s)); // strcpy(s,p); printf(&amp;#34;%s\n&amp;#34;,str_rev(p, s)); return 1; } String Functions##include &amp;lt;string.</description>
    </item>
    
    <item>
      <title>II.3 Macros, More Intializers in Social Nets</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/9_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/9_10/</guid>
      <description>II.3 Macros, More Intializers in Social Nets#Social Nets#typedef enum RelStatus { NotMentioned, Single, Engaged, Married } RelStatus; typedef struct Person { char name[100]; int age; RelStatus relstatus; Person* friends[5]; } Person; typedef struct SocialNet { Person members[100]; int size; } SocialNet; Social Nets with Macros##define MAX_FRIENDS 5 #define MAX_MEMBERS 100 #define MAX_NAME_LEN 100 typedef enum RelStatus { NotMentioned, Single, Engaged, Married } RelStatus; typedef struct Person { char name[MAX_NAME_LEN]; int age; RelStatus relstatus; Person* friends[MAX_FRIENDS]; } Person; typedef struct SocialNet { Person members[MAX_MEMBERS]; int size; } SocialNet; Intitializer#Name Age Rel Status Alice 24 Not Mentioned Bob 28 Maried Charlie 20 Single int main() { SocialNet social_net = { .</description>
    </item>
    
    <item>
      <title>II.4 Linked Lists</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/11_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/11_10/</guid>
      <description>II.4 Linked Lists#Problem: Large Arrays!##define MAX_MEMBERS 100 typedef struct SocialNet { Person members[MAX_MEMBERS]; int size; } SocialNet; Linked List: A array that grows according to needs#Linked List: Code#typedef struct Node { Person data; struct Node* next; } Node; typedef Node* LinkedList; Node third = { {&amp;#34;Alice&amp;#34;, 22}, NULL }; Node second = { {&amp;#34;Bob&amp;#34;, 26}, &amp;amp;third }; Node first = { {&amp;#34;Charlie&amp;#34;, 20}, &amp;amp;second }; LinkedList L = &amp;amp;first; Size of a Liniked List#int size(LinkedList l) { int s = 0; while (l !</description>
    </item>
    
    <item>
      <title>II.5 Linked Lists Problems</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/16_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/16_10/</guid>
      <description>II.5 Linked Lists Problems#Insert element at a position in the list#LinkedList insert(Person p, int pos, LinkedList l) { if (pos == 0) { Node* D = (Node *) malloc(sizeof(Node)); D-&amp;gt;data = p; D-&amp;gt;next = l; return D; } else { l-&amp;gt;next = insert(p, pos-1, l-&amp;gt;next); return l; } } Concatenate 2 lists#LinkedList concat(LinkedList l1, LinkedList l2) { if (l1 == NULL) { return l2; } else { l1-&amp;gt;next = concat(l1-&amp;gt;next, l2); return l1; } } Reverse a list#LinkedList reverse(LinkedList l) { int s = size(l); LinkedList l2 = NULL; for (int i = 0; i &amp;lt; s; i++) { l2 = insert(*element_at(s-i-1, l), i, l2); } return l2; } Full code##include &amp;#34;stdio.</description>
    </item>
    
    <item>
      <title>Lab - 1</title>
      <link>https://cpro-iiit.github.io/docs/course_material/labs/lab1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/labs/lab1/</guid>
      <description>Lab 1 (Week of 14 August)#Question 1 - &amp;ldquo;The Last 3&amp;rdquo;#Problem Description#Given an integer n as input, print the last 3 bits of the number in its binary representation starting with the most significant bit among the three.
Note: The last three bits are the bits corresponding to the,
\( 2^2, 2^1 \)and \( 2^0 \)positions (in that order)Link to problem on OJ</description>
    </item>
    
    <item>
      <title>Lab - 2</title>
      <link>https://cpro-iiit.github.io/docs/course_material/labs/lab2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/labs/lab2/</guid>
      <description>Lab 2 (Week of 21 August)#Question 1 - &amp;ldquo;Divisibility By 3&amp;rdquo;#Problem Description#Given an integer which has n digits, print YES if it is divisible by 3, and NO otherwise.
Note: The input number will not contain any leading zeroes.Link to problem on OJ
Input constraints#\(0 \le n \le 1000\)Input format#The first line of input contains a single integer n denoting the number of digits.</description>
    </item>
    
    <item>
      <title>Lab - 3</title>
      <link>https://cpro-iiit.github.io/docs/course_material/labs/lab3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/labs/lab3/</guid>
      <description>Lab 3 (Week of 4 September)#Question 1 - &amp;ldquo;Club Recruitments&amp;rdquo;#Problem Description#A new student club is organising a huge event this semester for silver jubilee celebrations. Initially, they don&amp;rsquo;t have enough members. So, they started recruiting new members in groups.
Meanwhile, tasks keep coming up within the club. Each club member can work on only one task during the semester.
If there is no member available (isn&amp;rsquo;t occupied with a task) when a task arises, it will remain unattended regardless of whether new individuals are recruited later on.</description>
    </item>
    
    <item>
      <title>Mid-Sem Lab Exam</title>
      <link>https://cpro-iiit.github.io/docs/course_material/quizzes/midLab1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/quizzes/midLab1/</guid>
      <description>Mid-Sem Lab Exam#Question 1 - &amp;ldquo;Voting&amp;rdquo;#Problem Description#The Elections for the new academic year are in full swing!
There are \(N\)students in the college and two candidates for the current elections (where \(N\)is guaranteed to be an odd number). The students cast their votes in the form of \(0s\)or \(1s\)where the \(i^{th}\)vote (\(1 &amp;lt;= i &amp;lt;= N\)) being \(1\)represents a vote to candidate A and it being \(0\)represents a vote for candidate B.</description>
    </item>
    
    <item>
      <title>Quiz - 1 Section A</title>
      <link>https://cpro-iiit.github.io/docs/course_material/quizzes/quiz1A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/quizzes/quiz1A/</guid>
      <description>Quiz 1#Section AQuestion 1 - 5 marks#Problem Description#Write a program to find the factorial of a number. Here n can be taken to be an input from the user.
Solution##include &amp;lt;stdio.h&amp;gt; int main(){ int n; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); if(n&amp;lt;0){ printf(&amp;#34;Invalid Input!&amp;#34;); }else{ int ans=1; for(int i=1;i&amp;lt;=n;i++){ ans*=i; } printf(&amp;#34;%d\n&amp;#34;,ans); } return 0; } Grading Scheme#1 mark: For writing
#include &amp;lt;stdio.h&amp;gt; 1 mark: For writing</description>
    </item>
    
    <item>
      <title>Quiz - 1 Section B</title>
      <link>https://cpro-iiit.github.io/docs/course_material/quizzes/quiz1B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/quizzes/quiz1B/</guid>
      <description>Quiz 1#Section BQuestion 1 - 5 marks#Problem Description#Write a program to find the sum of first n even numbers. Here n can be taken to be an input from the user.
Solution#Both Codes are considered to be valid.
#include&amp;lt;stdio.h&amp;gt; int main() { int i, ans = 0,n; scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); for(i=0; i &amp;lt; n; i ++) { ans = ans + 2*i; } printf(&amp;#34;%d\n&amp;#34;, ans); return 0; } #include&amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>References</title>
      <link>https://cpro-iiit.github.io/references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/references/</guid>
      <description>References from the web#Dive into C Textbook
C Programing Textbook
Variables, functions, arrays, strings
C Structs and Pointers
The C Book by Banahan, Brady, Doran
C and Unix Documentation from the Stanford CS Education Library
A C programming course by Steve Summit, online course material
Programming in C by A.D. Marshall, notes and examples</description>
    </item>
    
    <item>
      <title>Teaching Assistants</title>
      <link>https://cpro-iiit.github.io/tas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/tas/</guid>
      <description>Teaching Assistants#Pramod Rao | pramod.b@research.iiit.ac.in Shreeya Singh | shreeya.singh@students.iiit.ac.in Aditya Malhotra | aditya.malhotra@students.iiit.ac.in Anushka Agrawal | anushka.agrawal@students.iiit.ac.in Ayan Datta | ayan.datta@research.iiit.ac.in Bhargav Srinivas | bhargav.srinivas@students.iiit.ac.in Dheeraja Rajreddygari | dheeraja.rajreddygari@students.iiit.ac.in Harshvardhan | harshvardhan.sv@research.iiit.ac.in Keval Jain | keval.jain@research.iiit.ac.in Kriti Gupta | kriti.gupta@research.iiit.ac.in Kushagra Kharbanda | kushagra.kharbanda@students.iiit.ac.in Kyrylo Shyvam Kumar | kyrylo.shyvam@students.iiit.ac.in Manav Shah | shah.devendrakumar@students.iiit.ac.in Mihika Sanghi | mihika.sanghi@research.iiit.ac.in Mitansh Kayathwal | mitansh.kayathwal@students.iiit.ac.in Sriteja Pashya | sriteja.pashya@research.iiit.ac.in Ujjwal Shekhar | ujjwal.</description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://cpro-iiit.github.io/docs/course_material/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/template/</guid>
      <description>Course material template#Question 1#The question body would go here
Text#Linked list can be defined as either a node structure doing nothing or one that is pointing to another linked list
Links#See linked: Recursion
Button#Get HomeContributeColumns#Left Content Lorem markdownum insigne&amp;hellip;Mid Content Lorem markdownum insigne&amp;hellip;Right Content Lorem markdownum insigne&amp;hellip;Expand#Expandâ†•Markdown content#Lorem markdownum insigne&amp;hellip;Hint#Warning: Make sure to always free up memory!</description>
    </item>
    
    <item>
      <title>Tutorial - 1</title>
      <link>https://cpro-iiit.github.io/docs/course_material/tutorials/week1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/tutorials/week1/</guid>
      <description>Tutorial 1 (Week of 14 August)#Theory#Introduction to how compilation works in C#We all know that computer is incapable of reading and understanding the code we write in its native form. This means that the code needs to be converted in a form which the machine can understand. The machine only understands Binary code. Thus, there should be a process by which the code we write can be converted to Binary form.</description>
    </item>
    
    <item>
      <title>Week - 1</title>
      <link>https://cpro-iiit.github.io/docs/course_material/practice_problems/week1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/practice_problems/week1/</guid>
      <description>Practice problems for week - 1 (Week of 14 August)#None of the following problems require a knowledge of loops, conditional statements etc.
Question 1#Problem Description#Keval has forgotten the password to his I-Pad. The password is a 4-digit number where each digit takes a value from 0 to 9. The good thing is that Keval remembers that his password had exactly two unique digits, and each of these digits appeared exactly twice in the password.</description>
    </item>
    
    <item>
      <title>Week - 2</title>
      <link>https://cpro-iiit.github.io/docs/course_material/practice_problems/week2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/practice_problems/week2/</guid>
      <description>Practice problems for week - 2 (Week of 21 August)#Question 1#Problem Description#You are given a 3 x 3 grid filled with integers 1 to 9, in the following way:
1 2 3 4 5 6 7 8 9 You will be given two natural numbers A and B, both between 1 and 9. Your task is to find out if the two small squares with A and B written on them are horizontally adjacent.</description>
    </item>
    
    <item>
      <title>Week - 4</title>
      <link>https://cpro-iiit.github.io/docs/course_material/practice_problems/week4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/practice_problems/week4/</guid>
      <description>Practice problems for week 4#Question 1 - &amp;ldquo;Divisibility by 11&amp;rdquo;#Problem Description#Given an integer which has \(n\)digits, print YES if it is divisible by \(11\)and NO otherwise.
Note that the input number may contain leading zeroes.
Note that a number is divisible by \(11\)if and only if the difference of the sum of digits at odd positions and sum of digits at even positions in a number is divisible by 11.</description>
    </item>
    
    <item>
      <title>Week - 6</title>
      <link>https://cpro-iiit.github.io/docs/course_material/practice_problems/week6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/practice_problems/week6/</guid>
      <description>Practice problems for week 6#Question 1 - &amp;ldquo;Non-Fancy Trains&amp;rdquo;#Problem Description#There are \(n\)stations numbered \(1, 2, ... n\). Stations \(i\)and \(j\)are connected via a train (\(1 \le i, j \le n\)) iff \(|i - j| \le 2\). The price of such a train would be \(|a_i - a_{j}|\)where \(a_i\)is an input array denoting the ratings of stations.</description>
    </item>
    
  </channel>
</rss>
