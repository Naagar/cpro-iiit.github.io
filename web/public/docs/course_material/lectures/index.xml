<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPro Mon 23</title>
    <link>https://cpro-iiit.github.io/docs/course_material/lectures/</link>
    <description>Recent content on CPro Mon 23</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cpro-iiit.github.io/docs/course_material/lectures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>II.1 Typedef, Struct Initialization, Passing Pointers</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/4_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/4_10/</guid>
      <description>II.1 Typedef, Struct Initialization#Struct without Typedef##include&amp;lt;stdio.h&amp;gt; struct rectangle { float length; float breadth; }; float compute_area(struct rectangle r) { return r.length * r.breadth; } void print_rectangle(struct rectangle r) { printf(&amp;#34;Rectangle with length %f and breadth %f\n&amp;#34;, r.length, r.breadth); } int main() { struct rectangle rect = { 1.5, 3.2 }; // Initializer print_rectangle(rect); printf(&amp;#34;Area of the rectangle is %f \n&amp;#34;, compute_area(rect) ); } Struct with Typedef##include&amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>II.2 Strings and Enums</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/6_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/6_10/</guid>
      <description>II.2 Strings and Enums#Strings in C#as a pointer to char char *p = &amp;#34;abcde&amp;#34;; as an array of char char s[] = &amp;#34;abcde&amp;#34;; print(&amp;#34;%d %d&amp;#34;, sizeof(p), sizeof(s)); String Function Implementation##include &amp;#34;stdio.h&amp;#34; int strlenB(char* s) { int i = 0; while (s[i] != &amp;#39;\0&amp;#39;) { i++; } return i; } char* strcpyB(char *s, char *d) { int len_s = strlenB(s); for(int i = 0; i &amp;lt;= len_s;i++) { d[i] = s[i]; } return d; } char* str_rev(char *s, char *d) { int len_s = strlenB(s); for(int i = 0; i&amp;lt; len_s; i++) { d[i] = s[len_s - 1 - i]; } d[len_s] = &amp;#39;\0&amp;#39;; return d; } int main() { char *p = &amp;#34;xyz\0dsalkfjds&amp;#34;; char s[] = &amp;#34;abcde\0kjdakfjsh&amp;#34;; // abcde\0 // printf(&amp;#34;%d %d\n&amp;#34;,sizeof(p),sizeof(s)); // printf(&amp;#34;%s %s\n&amp;#34;,p, s); // printf(&amp;#34;%d %d\n&amp;#34;, strlen(p), strlen(s)); // strcpy(s,p); printf(&amp;#34;%s\n&amp;#34;,str_rev(p, s)); return 1; } String Functions##include &amp;lt;string.</description>
    </item>
    
  </channel>
</rss>
