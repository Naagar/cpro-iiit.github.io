<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPro Mon 23</title>
    <link>https://cpro-iiit.github.io/docs/course_material/lectures/</link>
    <description>Recent content on CPro Mon 23</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cpro-iiit.github.io/docs/course_material/lectures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01 Typedef, Struct Initialization, Passing Pointers</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/4_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/4_10/</guid>
      <description>01 Typedef, Struct Initialization#Struct without Typedef##include&amp;lt;stdio.h&amp;gt; struct rectangle { float length; float breadth; }; float compute_area(struct rectangle r) { return r.length * r.breadth; } void print_rectangle(struct rectangle r) { printf(&amp;#34;Rectangle with length %f and breadth %f\n&amp;#34;, r.length, r.breadth); } int main() { struct rectangle rect = { 1.5, 3.2 }; // Initializer print_rectangle(rect); printf(&amp;#34;Area of the rectangle is %f \n&amp;#34;, compute_area(rect) ); } Struct with Typedef##include&amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>02 Strings and Enums</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/6_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/6_10/</guid>
      <description>02 Strings and Enums#Strings in C#as a pointer to char char *p = &amp;#34;abcde&amp;#34;; as an array of char char s[] = &amp;#34;abcde&amp;#34;; print(&amp;#34;%d %d&amp;#34;, sizeof(p), sizeof(s)); String Function Implementation##include &amp;#34;stdio.h&amp;#34; int strlenB(char* s) { int i = 0; while (s[i] != &amp;#39;\0&amp;#39;) { i++; } return i; } char* strcpyB(char *s, char *d) { int len_s = strlenB(s); for(int i = 0; i &amp;lt;= len_s;i++) { d[i] = s[i]; } return d; } char* str_rev(char *s, char *d) { int len_s = strlenB(s); for(int i = 0; i&amp;lt; len_s; i++) { d[i] = s[len_s - 1 - i]; } d[len_s] = &amp;#39;\0&amp;#39;; return d; } int main() { char *p = &amp;#34;xyz\0dsalkfjds&amp;#34;; char s[] = &amp;#34;abcde\0kjdakfjsh&amp;#34;; // abcde\0 // printf(&amp;#34;%d %d\n&amp;#34;,sizeof(p),sizeof(s)); // printf(&amp;#34;%s %s\n&amp;#34;,p, s); // printf(&amp;#34;%d %d\n&amp;#34;, strlen(p), strlen(s)); // strcpy(s,p); printf(&amp;#34;%s\n&amp;#34;,str_rev(p, s)); return 1; } String Functions##include &amp;lt;string.</description>
    </item>
    
    <item>
      <title>03 Macros, More Intializers in Social Nets</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/9_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/9_10/</guid>
      <description>03 Macros, More Intializers in Social Nets#Social Nets#typedef enum RelStatus { NotMentioned, Single, Engaged, Married } RelStatus; typedef struct Person { char name[100]; int age; RelStatus relstatus; struct Person* friends[5]; } Person; typedef struct SocialNet { Person members[100]; int size; } SocialNet; Social Nets with Macros##define MAX_FRIENDS 5 #define MAX_MEMBERS 100 #define MAX_NAME_LEN 100 typedef enum RelStatus { NotMentioned, Single, Engaged, Married } RelStatus; typedef struct Person { char name[MAX_NAME_LEN]; int age; RelStatus relstatus; struct Person* friends[MAX_FRIENDS]; } Person; typedef struct SocialNet { Person members[MAX_MEMBERS]; int size; } SocialNet; Intitializer#Name Age Rel Status Alice 24 Not Mentioned Bob 28 Maried Charlie 20 Single int main() { SocialNet social_net = { .</description>
    </item>
    
    <item>
      <title>04 Linked Lists</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/11_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/11_10/</guid>
      <description>04 Linked Lists#Problem: Large Arrays!##define MAX_MEMBERS 100 typedef struct SocialNet { Person members[MAX_MEMBERS]; int size; } SocialNet; Linked List: A array that grows according to needs#Linked List: Code#typedef struct Node { Person data; struct Node* next; } Node; typedef Node* LinkedList; Node third = { {&amp;#34;Alice&amp;#34;, 22}, NULL }; Node second = { {&amp;#34;Bob&amp;#34;, 26}, &amp;amp;third }; Node first = { {&amp;#34;Charlie&amp;#34;, 20}, &amp;amp;second }; LinkedList L = &amp;amp;first; Size of a Liniked List#int size(LinkedList l) { int s = 0; while (l !</description>
    </item>
    
    <item>
      <title>05 Linked Lists Problems</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/16_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/16_10/</guid>
      <description>05 Linked Lists Problems#Insert element at a position in the list#LinkedList insert(Person p, int pos, LinkedList l) { if (pos == 0) { Node* D = (Node *) malloc(sizeof(Node)); D-&amp;gt;data = p; D-&amp;gt;next = l; return D; } else { l-&amp;gt;next = insert(p, pos-1, l-&amp;gt;next); return l; } } Concatenate 2 lists#LinkedList concat(LinkedList l1, LinkedList l2) { if (l1 == NULL) { return l2; } else { l1-&amp;gt;next = concat(l1-&amp;gt;next, l2); return l1; } } Reverse a list#LinkedList reverse(LinkedList l) { int s = size(l); LinkedList l2 = NULL; for (int i = 0; i &amp;lt; s; i++) { l2 = insert(*element_at(s-i-1, l), i, l2); } return l2; } Full code##include &amp;#34;stdio.</description>
    </item>
    
    <item>
      <title>06 More Linked List Problems</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/18_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/18_10/</guid>
      <description>06 More Linked List Problems#Reverse a LinkedList in place#LinkedList node_append(Node* n, LinkedList l) { if (l == NULL) { return n; } else { l-&amp;gt;next = node_append(n, l-&amp;gt;next); return l; } } // Recursive Solution LinkedList reverse_in_place(LinkedList l) { if (l == NULL) { return l; } else { LinkedList rev = reverse_in_place(l-&amp;gt;next); l-&amp;gt;next = NULL; rev = node_append(l, rev); return rev; } } Free memory in a LinkedList#void free_linked_list(LinkedList l) { if (l == NULL) { return; } else { LinkedList tail = l-&amp;gt;next; free(l); free_linked_list(tail); } } Sort a LinkedList#// assuming a &amp;lt; b // swaping is done by copy the data field in Node LinkedList swap(LinkedList l, int a, int b) { LinkedList head = l; Person temp; Node* a_ptr; Node* b_ptr; // Find above while(a &amp;gt;= 1) { l = l-&amp;gt;next; a--; b--; } a_ptr = l; while(b &amp;gt;= 1) { l = l-&amp;gt;next; b--; } b_ptr = l; temp = a_ptr-&amp;gt;data; a_ptr-&amp;gt;data = b_ptr-&amp;gt;data; b_ptr-&amp;gt;data = temp; return head; } LinkedList sort(LinkedList l) { // sort the linked list l and return it.</description>
    </item>
    
    <item>
      <title>07 Commandline Args &amp; Multifile Programming</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/27_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/27_10/</guid>
      <description>07 Commandline Args &amp;amp; Multifile Programming#Commandline Argument##include &amp;#34;stdio.h&amp;#34; int main(int argc, char* argv[]) { printf(&amp;#34;The number of arguments is %d\n&amp;#34;, argc); for (int i = 0; i &amp;lt; argc; i++) { printf(&amp;#34;%d Argument: %s\n&amp;#34;, i, argv[i]); } return 0; } Write a program that takes the First Name Last Name Age as commandline arguments and prints it as follows First Name: Last name : Age : /// Command Line Arguments // Write a program that takes the First Name Last Name Age // as commandline arguments and prints it as follows // First Name: &amp;lt;first arg&amp;gt; // Last name : &amp;lt;sec arg&amp;gt; // Age : &amp;lt;third arg&amp;gt; #include &amp;#34;stdio.</description>
    </item>
    
    <item>
      <title>08 Advanced Pointers</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/30_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/30_10/</guid>
      <description>08 Advanced Pointers#Pointer to Pointer for LinkedList functions#Full Code
void insert_v2(Person p, int pos, LinkedList* l) { *l = insert(p, pos, *l); } void reverse_v2(LinkedList* l) { *l = reverse(*l); } int main() { Node third = { {&amp;#34;Alice&amp;#34;, 22, Single}, NULL }; Node second = { {&amp;#34;Bob&amp;#34;, 26, Married}, &amp;amp;third }; Node first = { {&amp;#34;Charlie&amp;#34;, 20, Engaged}, &amp;amp;second }; Person D = {&amp;#34;Raj&amp;#34;, 18, NotMentioned}; Node l2 = { D, NULL}; Person E = {&amp;#34;Eve&amp;#34;, 28, Married}; Node l3 = { E, NULL}; LinkedList l = &amp;amp;first; printf(&amp;#34;Size of the list is %d\n&amp;#34;, size(l)); print_list(l); //l = reverse(l); reverse_v2(&amp;amp;l); print_list(l); // l = insert(D,2,l); // Problem1: Write the insert function such that, // we dont need to reassign l to the return value // of the function to update it.</description>
    </item>
    
    <item>
      <title>09 File Handling</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/01_11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/01_11/</guid>
      <description>09 File Handling#Opening/Closing a file##include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; /* File pointer to hold reference to our file */ FILE * fPtr; /* * Open file in w (write) mode. &amp;#34;data/file1.txt&amp;#34; is complete path to create file */ fPtr = fopen(&amp;#34;data/file1.txt&amp;#34;, &amp;#34;w&amp;#34;); /* fopen() return NULL if last operation was unsuccessful */ if(fPtr == NULL) { /* File not created hence exit */ printf(&amp;#34;Unable to create file.</description>
    </item>
    
    <item>
      <title>10 Libraries</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/03_11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/03_11/</guid>
      <description>10 Libraries#C Library Reference
Random Number Generation#Random Number Generation Reference
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;time.h&amp;gt; int main(void) { srand(time(NULL)); // use current time as seed for random generator int random_variable = rand(); printf(&amp;#34;Random value on [0,%d]: %d\n&amp;#34;, RAND_MAX, random_variable); int x; int count[] = { 0,0,0,0,0,0}; for (int i=0; i &amp;lt; 6000; i++) { x = 1+ rand()%6; // printf(&amp;#34;%d &amp;#34;, x); count[x-1]++; } printf(&amp;#34;%d %d %d %d %d %d\n&amp;#34;, count[0], count[1], count[2], count[3], count[4], count[5]); } Home Work 1#Write a program to generate and print:</description>
    </item>
    
    <item>
      <title>11 File I/O: Binary Data</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/06_11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/06_11/</guid>
      <description>11 Reading\Writing Binary Data#Store Reciept Management System#srms.h##include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;string.h&amp;gt; typedef struct Customer { char name[100]; int phone_no; } Customer; typedef enum PayMode { Cash = 0, Card = 1, UPI = 2 } PayMode; typedef struct Reciept { time_t time; float value; // Customer *customer; int customer_index; PayMode mode; } Reciept; typedef struct Database { Customer customers[100]; Reciept reciepts[1000]; int customer_count; int reciept_count; } Database; int add_customer(char *name, int phone_no, Database *db); Reciept* add_reciept(int value, int c, PayMode mode, Database *db); int find_customer_by_phone_no(int phone, Database *db); srms.</description>
    </item>
    
    <item>
      <title>12 Debugger</title>
      <link>https://cpro-iiit.github.io/docs/course_material/lectures/08_11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cpro-iiit.github.io/docs/course_material/lectures/08_11/</guid>
      <description>12 Debugger#GDB Cheatsheet
GDB Tutorial Slides UMD</description>
    </item>
    
  </channel>
</rss>
